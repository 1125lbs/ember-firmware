/*
 * Motor controller state machine declarations
 * Used as input to SMG (smg.sourceforge.net)
 */

#include <stdint.h>
#include <stdio.h>
#include <avr/pgmspace.h>

// Trace logging macros
#define SM_TRACE
#define SM_TRACE_INIT(Obj, Evt, SM_Name, InitState) \
        printf_P(PSTR("INFO: State machine (%S 0x%x) initialized, current state: %S\n\n"), \
               PSTR(#SM_Name), Obj, MotorController_State_Name(InitState));
#define SM_TRACE_EVENT(Obj, Evt, SM_Name, Event) \
        printf_P(PSTR("INFO: State machine (%S 0x%x) handling %S in %S\n"), \
               PSTR(#SM_Name), Obj, MotorController_Event_Name(Event), MotorController_State_Name(Obj->sm_state));
#define SM_TRACE_POST_EVENT(Obj, Evt, SM_Name, Event) \
        printf_P(PSTR("INFO: State machine (%S 0x%x) transaction complete, current state: %S\n\n"), \
               PSTR(#SM_Name), Obj, MotorController_State_Name(Obj->sm_state));
#define SM_TRACE_EXP_EV(Obj, Evt, SM_Name, Event) \
        printf(PSTR("** SM %S 0x%x: State %d ++ Event %d\n"), \
               PSTR(#SM_Name), Obj, Obj->sm_state, Event);

#include "StateMachine.h"
#include "MotorController.h"
#include "Motors.h"
#include "EventData.h"
#include "EventQueue.h"
#include "MachineDefinitions.h"

## State machine name
SM_NAME MotorController

## Data type representing state machine instantiation
SM_OBJ MotorController_t*

## Data type of event data
SM_EVT EventData

// Error handler
void MotorController_State_Machine_Error(
        MotorController_t* stateMachine,
        EventData eventData,
        uint8_t errorID,
        const char* errorText, ...)
{
#ifdef DEBUG
    printf_P(PSTR("ERROR: Fatal state machine error\n"));
#endif /* DEBUG */
}

static EventQueue eventQueue;

static void DequeueEvent(MotorController_t* mcState)
{
    if (!eventQueue.IsEmpty())
    {
        mcState->queuedEvent = true;
        eventQueue.Remove(mcState->queuedEventCode, mcState->queuedEventData);
    }
}

static void QueryResumeRequestedFlag(MotorController_t* mcState)
{
    // Check resume requested flag when entering paused state
    // Setting the resume flag results in the main loop raising a resume event only
    // after the state machine enters the paused state
    if (mcState->resumeRequested)
    {
        mcState->resumeRequested = false;
        mcState->resume = true;
    }
}

STATE Disabled                        The motor drivers and controller are disabled
STATE Ready                           The motor drivers are enabled and controller ready to execute any command
STATE Error                           An error has occurred
STATE HomingZAxis                     The z axis is searching for its limit
STATE HomingRAxis                     The r axis is searching for its limit
STATE MovingAxis                      An axis is in motion
STATE HomingZAxisDeceleratingForPause The z axis is decelerating to a stop from homing for pause
STATE HomingRAxisDeceleratingForPause The r axis is decelerating to a stop from homing for pause
STATE MovingAxisDeceleratingForPause  The currently moving axis is decelerating to a stop for pause
STATE HomingZAxisPaused               z axis homing is paused
STATE HomingRAxisPaused               r axis homing is paused
STATE MovingAxisPaused                Axis movement is paused
STATE EndingMotion                    The axis in motion is decelerating, system will clear planning buffer

EVENT ResetRequested           -- -- Reset command received
EVENT HomeZAxisRequested       -- -- Home z axis command received
EVENT HomeRAxisRequested       -- -- Home r axis command received
EVENT MoveZAxisRequested       -- -- Move z axis command received
EVENT MoveRAxisRequested       -- -- Move r axis command received
EVENT DisableRequested         -- -- Disable motor drivers command received
EVENT EnableRequested          -- -- Enable motor drivers command received
EVENT SetZAxisSettingRequested -- -- Set z axis setting command received
EVENT SetRAxisSettingRequested -- -- Set r axis setting command received
EVENT InterruptRequested       -- -- Generate interrupt command received
EVENT AxisLimitReached         -- -- Axis limit switched reached
EVENT MotionComplete           -- -- All moves in motion planning buffer have been executed
EVENT PauseRequested           -- -- Pause the current motion in progress received
EVENT ResumeRequested          -- -- Resume the previously paused motion
EVENT ClearRequested           -- -- Clear command received

## When defining transactions, the defaults involving wildcards need to appear before the more specific definitions

## Dequeue event when returning to the Ready state for immediate handling
TRANS+ EndingMotion MotionComplete           -- DequeueEvent
TRANS+ MovingAxis   MotionComplete           -- DequeueEvent
TRANS+ HomingZAxis  MotionComplete           -- DequeueEvent
TRANS+ HomingRAxis  MotionComplete           -- DequeueEvent
TRANS+ Ready        SetZAxisSettingRequested -- DequeueEvent
TRANS+ Ready        SetRAxisSettingRequested -- DequeueEvent
TRANS+ Ready        InterruptRequested       -- DequeueEvent

## Queue incoming commands by default
TRANS * DisableRequested         -- EnqueueEvent
TRANS * HomeZAxisRequested       -- EnqueueEvent
TRANS * HomeRAxisRequested       -- EnqueueEvent
TRANS * MoveZAxisRequested       -- EnqueueEvent
TRANS * MoveRAxisRequested       -- EnqueueEvent
TRANS * SetZAxisSettingRequested -- EnqueueEvent
TRANS * SetRAxisSettingRequested -- EnqueueEvent
TRANS * InterruptRequested       -- EnqueueEvent

## Ignore incoming commands other than reset in error state
TRANS Error EnableRequested          --
TRANS Error DisableRequested         --
TRANS Error HomeZAxisRequested       --
TRANS Error HomeRAxisRequested       --
TRANS Error MoveZAxisRequested       --
TRANS Error MoveRAxisRequested       --
TRANS Error SetZAxisSettingRequested --
TRANS Error SetRAxisSettingRequested --
TRANS Error InterruptRequested       --

## Ignore incoming motion commands and disable command in disabled state
TRANS Disabled DisableRequested   --
TRANS Disabled HomeZAxisRequested --
TRANS Disabled HomeRAxisRequested --
TRANS Disabled MoveZAxisRequested --
TRANS Disabled MoveRAxisRequested --
TRANS Disabled InterruptRequested --

## Handle settings in disabled state
TRANS Disabled SetZAxisSettingRequested -- SetZAxisSetting
TRANS Disabled SetRAxisSettingRequested -- SetRAxisSetting

## Handle commands other than enable in ready state
TRANS Ready DisableRequested         Disabled    DisableMotorDrivers
TRANS Ready HomeZAxisRequested       HomingZAxis HomeZAxis
TRANS Ready HomeRAxisRequested       HomingRAxis HomeRAxis
TRANS Ready MoveZAxisRequested       MovingAxis  MoveZAxis
TRANS Ready MoveRAxisRequested       MovingAxis  MoveRAxis
TRANS Ready SetZAxisSettingRequested --          SetZAxisSetting
TRANS Ready SetRAxisSettingRequested --          SetRAxisSetting
TRANS Ready InterruptRequested       --          GenerateInterrupt

## Ignore limit reached events except when homing
TRANS *           AxisLimitReached --
TRANS HomingZAxis AxisLimitReached EndingMotion BeginMotionHold
TRANS HomingRAxis AxisLimitReached EndingMotion BeginMotionHold

## Reset from any state transitions to disabled
## Reset also leaves motor drivers disabled
TRANS+ * ResetRequested Disabled DisableMotorDrivers
TRANS *  ResetRequested Disabled ResetMotorController

## Handle enable from disabled state, ignore from all other states
TRANS *        EnableRequested --
TRANS Disabled EnableRequested Ready EnableMotorDrivers

## Motion complete occurs when done moving
## Movement can stop as a result of carrying out the entire move to completion
## or as a result of a hold request
TRANS *             MotionComplete --
TRANS EndingMotion  MotionComplete Ready EndMotion
TRANS MovingAxis    MotionComplete Ready EndMotion

## A MotionComplete event may be received in a homing state if the axis is
## already at home or if the limit switch was never reached
## The axis is done moving or never moved so go to Ready state
TRANS HomingZAxis MotionComplete Ready EndMotion
TRANS HomingRAxis MotionComplete Ready EndMotion

## After decelerating for a pause, enter the appropriate paused state
TRANS MovingAxisDeceleratingForPause  MotionComplete MovingAxisPaused  QueryResumeRequestedFlag
TRANS HomingZAxisDeceleratingForPause MotionComplete HomingZAxisPaused QueryResumeRequestedFlag
TRANS HomingRAxisDeceleratingForPause MotionComplete HomingRAxisPaused QueryResumeRequestedFlag

## Pause from moving or homing transitions to appropriate pausing deceleration
## Otherwise ignore pause
TRANS *           PauseRequested --
TRANS MovingAxis  PauseRequested MovingAxisDeceleratingForPause  BeginMotionHold
TRANS HomingZAxis PauseRequested HomingZAxisDeceleratingForPause BeginMotionHold
TRANS HomingRAxis PauseRequested HomingRAxisDeceleratingForPause BeginMotionHold

## Resume from paused returns to appropriate motion state
## Resume when decelerating from pause results in the state machine setting a resume flag
## The resume flag is checked when decelerating is complete to handle the resume received while decelerating
TRANS *                               ResumeRequested --
TRANS MovingAxisDeceleratingForPause  ResumeRequested --          SetResumeRequestedFlag
TRANS HomingZAxisDeceleratingForPause ResumeRequested --          SetResumeRequestedFlag
TRANS HomingRAxisDeceleratingForPause ResumeRequested --          SetResumeRequestedFlag
TRANS MovingAxisPaused                ResumeRequested MovingAxis  EndMotionHold
TRANS HomingZAxisPaused               ResumeRequested HomingZAxis EndMotionHold       
TRANS HomingRAxisPaused               ResumeRequested HomingRAxis EndMotionHold       

## Only handle clear command when paused or decelerating to paused
## If the clear is received while the axis is still decelerating, transition to EndingMotion
## so the system will return to Ready when the pausing deceleration motion is complete
## If the clear is received when paused, transition directly to Ready
## In either case, the clear the event queue immediately when handling the clear event
TRANS+  MovingAxisPaused                ClearRequested --           ClearEventQueue
TRANS+  HomingZAxisPaused               ClearRequested --           ClearEventQueue
TRANS+  HomingRAxisPaused               ClearRequested --           ClearEventQueue
TRANS   *                               ClearRequested --
TRANS   MovingAxisDeceleratingForPause  ClearRequested EndingMotion ClearEventQueue
TRANS   HomingZAxisDeceleratingForPause ClearRequested EndingMotion ClearEventQueue
TRANS   HomingRAxisDeceleratingForPause ClearRequested EndingMotion ClearEventQueue
TRANS   MovingAxisPaused                ClearRequested Ready        EndMotion
TRANS   HomingZAxisPaused               ClearRequested Ready        EndMotion
TRANS   HomingRAxisPaused               ClearRequested Ready        EndMotion

CODE ResetMotorController     MotorController::Reset();
CODE EnableMotorDrivers       Motors::Enable();
CODE DisableMotorDrivers      Motors::Disable();
CODE MoveZAxis                MotorController::Move(Z_AXIS, _/EVT.parameter, _/OBJ->zAxisSettings);
CODE MoveRAxis                MotorController::Move(R_AXIS, _/EVT.parameter, _/OBJ->rAxisSettings);
CODE SetZAxisSetting          MotorController::UpdateSettings(Z_AXIS, _/EVT, _/OBJ->zAxisSettings);
CODE SetRAxisSetting          MotorController::UpdateSettings(R_AXIS, _/EVT, _/OBJ->rAxisSettings);
CODE HomeZAxis                MotorController::HomeZAxis(_/EVT.parameter, _/OBJ);
CODE HomeRAxis                MotorController::HomeRAxis(_/EVT.parameter, _/OBJ);
CODE BeginMotionHold          MotorController::BeginMotionHold();
CODE EndMotionHold            MotorController::EndMotionHold();
CODE EndMotion                MotorController::EndMotion();
CODE EnqueueEvent             eventQueue.Add(event_code, _/EVT);
CODE DequeueEvent             DequeueEvent(_/OBJ);
CODE GenerateInterrupt        MotorController::GenerateInterrupt();
CODE ClearEventQueue          eventQueue.Clear();
CODE SetResumeRequestedFlag   _/OBJ->resumeRequested = true;
CODE QueryResumeRequestedFlag QueryResumeRequestedFlag(_/OBJ);
