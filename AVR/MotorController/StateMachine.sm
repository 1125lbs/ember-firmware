/*
 * Motor controller state machine declarations
 * Used as input to SMG (smg.sourceforge.net)
 */

#include <stdint.h>
#include <stdio.h>
#include <avr/pgmspace.h>

// Trace logging macros
#define SM_TRACE
#define SM_TRACE_INIT(Obj, Evt, SM_Name, InitState) \
        printf_P(PSTR("INFO: State machine (%S 0x%x) initialized, current state: %S\n\n"), \
               PSTR(#SM_Name), Obj, MotorController_State_Name(InitState));
#define SM_TRACE_EVENT(Obj, Evt, SM_Name, Event) \
        printf_P(PSTR("INFO: State machine (%S 0x%x) handling %S in %S\n"), \
               PSTR(#SM_Name), Obj, MotorController_Event_Name(Event), MotorController_State_Name(Obj->sm_state));
#define SM_TRACE_POST_EVENT(Obj, Evt, SM_Name, Event) \
        printf_P(PSTR("INFO: State machine (%S 0x%x) transaction complete, current state: %S\n\n"), \
               PSTR(#SM_Name), Obj, MotorController_State_Name(Obj->sm_state));
#define SM_TRACE_EXP_EV(Obj, Evt, SM_Name, Event) \
        printf(PSTR("** SM %S 0x%x: State %d ++ Event %d\n"), \
               PSTR(#SM_Name), Obj, Obj->sm_state, Event);

#include "StateMachine.h"
#include "MotorController.h"
#include "Motors.h"
#include "EventData.h"
#include "EventQueue.h"
#include "MachineDefinitions.h"

## State machine name
SM_NAME MotorController

## Data type representing state machine instantiation
SM_OBJ MotorController_t*

## Data type of event data
SM_EVT EventData

// Error handler
void MotorController_State_Machine_Error(
        MotorController_t* stateMachine,
        EventData eventData,
        uint8_t errorID,
        const char* errorText, ...)
{
#ifdef DEBUG
    printf_P(PSTR("ERROR: Fatal state machine error\n"));
#endif /* DEBUG */
}

static EventQueue eventQueue;

static void DequeueEvent(MotorController_t* mcState)
{
    if (!eventQueue.IsEmpty())
    {
        mcState->queuedEvent = true;
        eventQueue.Remove(mcState->queuedEventCode, mcState->queuedEventData);
    }
}

STATE Ready               The system is in an idle state ready to execute any command
STATE Error               An error has occured
STATE HomingZAxis         The z axis is searching for its limit
STATE HomingRAxis         The r axis is searching for its limit
STATE MovingAxis          An axis is in motion
STATE PausingDeceleration The currently pausing axis is decelerating to a stop
STATE Paused              Motion is paused
STATE EndingMotion        The axis in motion is decelerating, system will clear planning buffer

EVENT ResetRequested             -- -- Reset command received
EVENT HomeZAxisRequested         -- -- Home z axis command received
EVENT HomeRAxisRequested         -- -- Home r axis command received
EVENT MoveZAxisRequested         -- -- Move z axis command received
EVENT MoveRAxisRequested         -- -- Move r axis command received
EVENT EnableZAxisMotorRequested  -- -- Enable z axis motor command received
EVENT EnableRAxisMotorRequested  -- -- Enable r axis motor command received
EVENT DisableZAxisMotorRequested -- -- Disable z axis motor command received
EVENT DisableRAxisMotorRequested -- -- Disable r axis motor command received
EVENT SetZAxisSettingRequested   -- -- Set z axis setting command received
EVENT SetRAxisSettingRequested   -- -- Set r axis setting command received
EVENT InterruptRequested         -- -- Generate interrupt command received
EVENT AxisLimitReached           -- -- Axis limit switched reached
EVENT MotionComplete             -- -- All moves in motion planning buffer have been executed
EVENT PauseRequested             -- -- Pause the current motion in progress received
EVENT ResumeRequested            -- -- Resume the previously paused motion
EVENT ClearRequested             -- -- Clear command received

## When defining transactions, the defaults involving wildcards need to appear before the more specific definitions

## Dequeue event when returning to the Ready state for immediate handling
TRANS+ EndingMotion MotionComplete              -- DequeueEvent
TRANS+ MovingAxis   MotionComplete              -- DequeueEvent
TRANS+ HomingZAxis  MotionComplete              -- DequeueEvent
TRANS+ HomingRAxis  MotionComplete              -- DequeueEvent
TRANS+ Ready        DisableZAxisMotorRequested  -- DequeueEvent 
TRANS+ Ready        DisableRAxisMotorRequested  -- DequeueEvent 
TRANS+ Ready        EnableZAxisMotorRequested   -- DequeueEvent 
TRANS+ Ready        EnableRAxisMotorRequested   -- DequeueEvent 
TRANS+ Ready        SetZAxisSettingRequested    -- DequeueEvent 
TRANS+ Ready        SetRAxisSettingRequested    -- DequeueEvent 
TRANS+ Ready        InterruptRequested          -- DequeueEvent 

## Queue incoming commands by default
TRANS * DisableZAxisMotorRequested -- EnqueueEvent
TRANS * DisableRAxisMotorRequested -- EnqueueEvent 
TRANS * EnableZAxisMotorRequested  -- EnqueueEvent
TRANS * EnableRAxisMotorRequested  -- EnqueueEvent
TRANS * HomeZAxisRequested         -- EnqueueEvent
TRANS * HomeRAxisRequested         -- EnqueueEvent
TRANS * MoveZAxisRequested         -- EnqueueEvent
TRANS * MoveRAxisRequested         -- EnqueueEvent
TRANS * SetZAxisSettingRequested   -- EnqueueEvent
TRANS * SetRAxisSettingRequested   -- EnqueueEvent
TRANS * InterruptRequested         -- EnqueueEvent

## Ignore incoming commands in error state
TRANS Error DisableZAxisMotorRequested --
TRANS Error DisableRAxisMotorRequested --
TRANS Error EnableZAxisMotorRequested  --
TRANS Error EnableRAxisMotorRequested  --
TRANS Error HomeZAxisRequested         --
TRANS Error HomeRAxisRequested         --
TRANS Error MoveZAxisRequested         --
TRANS Error MoveRAxisRequested         --
TRANS Error SetZAxisSettingRequested   --
TRANS Error SetRAxisSettingRequested   --
TRANS Error InterruptRequested         --

## Handle commands in ready state
TRANS Ready DisableZAxisMotorRequested --          DisableZAxisMotor
TRANS Ready DisableRAxisMotorRequested --          DisableRAxisMotor
TRANS Ready EnableZAxisMotorRequested  --          EnableZAxisMotor
TRANS Ready EnableRAxisMotorRequested  --          EnableRAxisMotor
TRANS Ready HomeZAxisRequested         HomingZAxis HomeZAxis
TRANS Ready HomeRAxisRequested         HomingRAxis HomeRAxis
TRANS Ready MoveZAxisRequested         MovingAxis  MoveZAxis
TRANS Ready MoveRAxisRequested         MovingAxis  MoveRAxis
TRANS Ready SetZAxisSettingRequested   --          SetZAxisSetting
TRANS Ready SetRAxisSettingRequested   --          SetRAxisSetting
TRANS Ready InterruptRequested         --          GenerateInterrupt

## Ignore limit reached events except when homing
TRANS *           AxisLimitReached --
TRANS HomingZAxis AxisLimitReached EndingMotion BeginMotionHold
TRANS HomingRAxis AxisLimitReached EndingMotion BeginMotionHold

## Reset from any state transitions to ready
TRANS * ResetRequested Ready ResetMotorController

## Motion complete occurs when done moving
## Movement can stop as a result of carrying out the entire move to completion
## or as a result of a hold request
TRANS *             MotionComplete --
TRANS EndingMotion  MotionComplete Ready EndMotion
TRANS MovingAxis    MotionComplete Ready EndMotion

## A MotionComplete event may be received in a homing state if the axis is
## already at home or if the limit switch was never reached
## The axis is done moving or never moved so go to Ready state
TRANS HomingZAxis MotionComplete Ready EndMotion
TRANS HomingRAxis MotionComplete Ready EndMotion

## After decelerating for a pause, enter the paused state
TRANS PausingDeceleration MotionComplete Paused

## Only handle Pause when an axis is moving
TRANS *          PauseRequested --
TRANS MovingAxis PauseRequested PausingDeceleration BeginMotionHold

## Only handle Resume when an axis is paused or decelerating for a pause
TRANS *                   ResumeRequested --
TRANS PausingDeceleration ResumeRequested MovingAxis EndMotionHold
TRANS Paused              ResumeRequested MovingAxis EndMotionHold

## Only handle Clear after a pause command
## If the clear is received while the axis is still decelerating, transition to EndingMotion
## so the system will return to Ready when the pausing deceleration motion is complete
## If the clear is received when paused, transition directly to Ready
## In either case, the clear the event queue immediately when handling the clear event
TRANS+  Paused              ClearRequested --           ClearEventQueue
TRANS   *                   ClearRequested --
TRANS   PausingDeceleration ClearRequested EndingMotion ClearEventQueue
TRANS   Paused              ClearRequested Ready        EndMotion

CODE ResetMotorController      MotorController::Reset();
CODE EnableZAxisMotor          Motors::Enable();
CODE EnableRAxisMotor          Motors::Enable();
CODE DisableZAxisMotor         Motors::Disable();
CODE DisableRAxisMotor         Motors::Disable();
CODE MoveZAxis                 MotorController::Move(Z_AXIS, _/EVT.parameter, _/OBJ->zAxisSettings);
CODE MoveRAxis                 MotorController::Move(R_AXIS, _/EVT.parameter, _/OBJ->rAxisSettings);
CODE SetZAxisSetting           MotorController::UpdateSettings(Z_AXIS, _/EVT, _/OBJ->zAxisSettings);
CODE SetRAxisSetting           MotorController::UpdateSettings(R_AXIS, _/EVT, _/OBJ->rAxisSettings);
CODE HomeZAxis                 MotorController::HomeZAxis(_/EVT.parameter, _/OBJ);
CODE HomeRAxis                 MotorController::HomeRAxis(_/EVT.parameter, _/OBJ);
CODE BeginMotionHold           MotorController::BeginMotionHold();
CODE EndMotionHold             MotorController::EndMotionHold();
CODE EndMotion                 MotorController::EndMotion();
CODE EnqueueEvent              eventQueue.Add(event_code, _/EVT);
CODE DequeueEvent              DequeueEvent(_/OBJ);
CODE GenerateInterrupt         MotorController::GenerateInterrupt();
CODE ClearEventQueue           eventQueue.Clear();
