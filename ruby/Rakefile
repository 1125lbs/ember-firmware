require 'bundler/gem_tasks'

def get_definition(file, key)
  m = file.match(/#define\s+#{key}\W+"(.*?)"/)
  fail("could not find definition for #{key}") if m.nil?
  m[1]
end

def get_definitions
  include_path = File.expand_path('../../C++/include', __FILE__)
  mapping = {
    #:NameOfHeaderFileWithoutExtension => %w(CONSTANT1 CONSTANT2)
    :PrinterStatus => %w(PRINTER_STATUS_KEY STATE_PS_KEY UISUBSTATE_PS_KEY),
    :Filenames => %w(COMMAND_PIPE COMMAND_RESPONSE_PIPE),
    :Version => %w(FIRMWARE_VERSION)
  }
  
  buf = ['module Smith']
  mapping.each_pair do |filename, keys|
    file = File.read(File.join(include_path, "#{filename}.h"))
    keys.each do |key|
      buf << "  #{key} = '#{get_definition(file, key)}'"
    end
  end
  buf << 'end'
  buf.join("\n")
end

def definition_file
  File.expand_path('../lib/smith/definitions.rb', __FILE__)
end

desc 'Generate constant definition file using preprocessor definitions from C++ header files'
task :import_definitions do
  if (definitions = get_definitions) == File.read(definition_file)
    puts 'Definition file is up to date'
  else
    puts 'Updating definition file'
    begin
      File.write(definition_file, definitions)
    rescue Errno::EACCES
      abort("#{definition_file} is not writable, ensure write access before continuing")
    end
    puts 'Successfully imported constant definitions'
  end
end

task :check_definitions do
  if get_definitions != File.read(definition_file)
    abort('definitions.rb is not up to date. Run "rake import_definitions" before continuing')
  end
end

desc 'Deploy to beaglebone'
task deploy: [:check_definitions, :build] do
  puts "Deploying Smith version #{Smith::VERSION}"

  # Package dependencies into vendor/cache on the localhost
  system '/usr/bin/env RUBYOPT= bundle package --all'
  abort('aborting') if $?.to_i != 0

  # Set paths
  local_root_dir = File.expand_path('..', __FILE__)
  remote_cache_parent_dir = '/root'
  local_cache_dir = File.join(local_root_dir, 'vendor/cache')
  remote_cache_dir = File.join(remote_cache_parent_dir, File.basename(local_cache_dir))
  gem_file = File.join(local_root_dir, 'pkg', "smith-#{Smith::VERSION}.gem")

  require 'sshkit'
  require 'sshkit/dsl'

  host = SSHKit::Host.new('root@192.168.7.2')
  host.ssh_options = { paranoid: false }
  host.password = 'root'

  on host do
    # Clean
    execute "rm -rf #{remote_cache_dir}"

    # Make sure the target directory exists
    execute "mkdir -p #{remote_cache_parent_dir}"

    # Upload the dependencies
    upload! local_cache_dir, remote_cache_parent_dir, recursive: true

    # Upload the gem
    upload! gem_file, remote_cache_dir

    # Uninstall old versions
    execute 'gem uninstall smith -ax'

    # Install the gem using local copies of dependencies
    within remote_cache_dir do
      options = ['install', File.basename(gem_file)]
      options << '--local'
      options << '--no-rdoc --no-ri'
      execute :gem, options
    end

  end

end

