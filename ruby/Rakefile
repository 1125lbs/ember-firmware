require 'bundler/gem_tasks'

def get_definition(file, key)
  m = file.match(/#define\s+#{key}\W+"(.*?)"/)
  fail("could not find definition for #{key}") if m.nil?
  m[1]
end

desc 'Generate constant definition file using preprocessor definitions from C++ header files'
task :import_definitions do
  include_path = File.expand_path('../../C++/include', __FILE__)
  definition_file = File.expand_path('../lib/smith/definitions.rb', __FILE__)
  mapping = {
    #:NameOfHeaderFileWithoutExtension => %w(CONSTANT1 CONSTANT2)
    :PrinterStatus => %w(PRINTER_STATUS_KEY STATE_PS_KEY),
    :Filenames => %w(COMMAND_PIPE COMMAND_RESPONSE_PIPE),
    :Version => %w(FIRMWARE_VERSION)
  }
  
  buf = ['module Smith']
  mapping.each_pair do |filename, keys|
    file = File.read(File.join(include_path, "#{filename}.h"))
    keys.each do |key|
      buf << "  #{key} = '#{get_definition(file, key)}'"
    end
  end
  buf << 'end'
  File.write(definition_file, buf.join("\n"))

  # Reload constants
  mapping.values.flatten.push('VERSION').each do |const|
    begin
      Smith.send(:remove_const, const.to_sym)
      puts "removed const: #{c}"
    rescue NameError
    end
  end
  load definition_file
  load File.expand_path('../lib/smith/version.rb', __FILE__)
  
  puts 'Successfully imported constant definitions'
  puts "Smith version: #{Smith::VERSION}"
end

desc 'Deploy to beaglebone'
task deploy: :build do
  puts "smith version: #{Smith::VERSION}"

  # Package dependencies into vendor/cache on the localhost
  system '/usr/bin/env RUBYOPT= bundle package --all'

  # Set paths
  remote_gem_dir = '/root/'
  vendor_cache = File.expand_path('../vendor/cache', __FILE__)
  gem_file = "#{File.expand_path('../pkg', __FILE__)}/smith-#{Smith::VERSION}.gem"
  gem_filename = File.basename(gem_file)

  require 'sshkit'
  require 'sshkit/dsl'

  host = SSHKit::Host.new('root@192.168.7.2')
  host.ssh_options = { paranoid: false }
  host.password = 'root'

  on host do
    # Make sure the target directory exists
    execute "mkdir -p #{remote_gem_dir}"

    # Upload the dependencies
    upload! vendor_cache, remote_gem_dir, recursive: true

    # Upload the gem
    upload! gem_file, "#{remote_gem_dir}/cache/"

    # Uninstall old versions
    execute 'gem uninstall smith -ax'

    # Install the gem using local copies of dependencies
    within "#{remote_gem_dir}/cache" do
      options = ['install', gem_filename]
      options << '--local'
      options << '--no-rdoc --no-ri'
      execute :gem, options
    end

  end

end

